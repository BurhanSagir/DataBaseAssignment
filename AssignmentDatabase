

select * from tbl_employee

 --1. Select employees first name, last name, job_id and salary whose first name starts with alphabet P
             select first_name,last_name,job_id,salary from tbl_employee where first_name like 'P%'

 -- 2. Write a query to select employee with the highest salary
             select top 1(salary) from tbl_employee order by salary  desc

 --3. Select employee with the second highest salary
             SELECT MAX(SALARY) FROM tbl_employee WHERE SALARY < (SELECT MAX(SALARY) FROM tbl_employee)

 --4. Fetch employees with 2nd or 3rd highest salary
		     select salary from tbl_employee order by  salary desc offset 1 row FETCH NEXT 2 ROWS ONLY


 --5. Write a query to select employees and their corresponding managers and their salaries
	         select salary as Employe_Salary, manager_id from tbl_employee where manager_id is NOt Null order by salary desc


 --6. Write a query to show count of employees under each manager in descending order
             SELECT sup.employee_id, COUNT (sub.employee_id) AS number_of_employees FROM tbl_employee sub JOIN tbl_employee sup ON 
             sub.manager_id = sup.employee_id GROUP BY sup.employee_id, sup.first_name, sup.last_name;


 -- 7. Find the count of employees in each department
		     SELECT dept.department_name, COUNT(emp.department_id) AS count FROM tbl_department dept LEFT OUTER JOIN
			 tbl_employee emp ON emp.department_id = dept.department_id GROUP BY dept.department_name;


 -- 8. Get the count of employees hired year wise
             Select COUNT(hire_date) from tbl_employee

 --9. Find the salary range of employees
             select Salary from tbl_employee range order by salary desc

--10. Write a query to divide people into three groups based on their salaries


--11. Select the employees whose first_name contains “an”
             select first_name from tbl_employee where first_name like '%an%'

--12. Select employee first name and the corresponding phone number in theformat (_ _ )-( _ )-( _ _ _)

--13. Find the employees who joined in August, 2022.
             select employee_id as Employee from tbl_employee where hire_date<('2022-8-1') 

--14. Write an SQL query to display employees who earn more than the average salary in that company
             SELECT employee_id, first_name,last_name FROM tbl_employee WHERE salary >( SELECT AVG(salary)  FROM tbl_employee )
             order by salary desc;


--15. Find the maximum salary from each department.
             select min(salary) from tbl_employe inner join tbl_department on tbl_employe.employee_id=tbl_department.department_id


--16. Write a SQL query to display the 5 least earning employees
             select top 5 Salary as MinimunSalary from tbl_employee order by salary asc


--17. Find the employees hired in the 2018 - 2021
              select * from tbl_employe where YEAR(hire_date) between 2018 and 2021

--18. Display the employees first name and the name in reverse order


--19. Find the employees who joined the company after 15th of the month

--20. Display the managers and the reporting employees who work in different departments


create procedure Department
@department_id int,
@department_name nvarchar(max),
@location_id int
as
begin
insert into tbl_department(department_id,department_name,location_id)values(@department_id,@department_name,@location_id)
end 
go




USE [master]
GO
/****** Object:  Database [Assignment]    Script Date: 1/3/2023 10:40:14 PM ******/
CREATE DATABASE [Assignment]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Assignment', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\Assignment.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'Assignment_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\Assignment_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
GO
ALTER DATABASE [Assignment] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Assignment].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [Assignment] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [Assignment] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [Assignment] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [Assignment] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [Assignment] SET ARITHABORT OFF 
GO
ALTER DATABASE [Assignment] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [Assignment] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [Assignment] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [Assignment] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [Assignment] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [Assignment] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [Assignment] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [Assignment] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [Assignment] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [Assignment] SET  DISABLE_BROKER 
GO
ALTER DATABASE [Assignment] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [Assignment] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [Assignment] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [Assignment] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [Assignment] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [Assignment] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [Assignment] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [Assignment] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [Assignment] SET  MULTI_USER 
GO
ALTER DATABASE [Assignment] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [Assignment] SET DB_CHAINING OFF 
GO
ALTER DATABASE [Assignment] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [Assignment] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [Assignment] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [Assignment] SET QUERY_STORE = OFF
GO
USE [Assignment]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO
USE [Assignment]
GO
/****** Object:  Table [dbo].[tbl_department]    Script Date: 1/3/2023 10:40:14 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbl_department](
	[department_id] [int] IDENTITY(1,1) NOT NULL,
	[department_name] [nvarchar](max) NULL,
	[location_id] [int] NULL,
 CONSTRAINT [PK_tbl_department] PRIMARY KEY CLUSTERED 
(
	[department_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tbl_employee]    Script Date: 1/3/2023 10:40:14 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbl_employee](
	[employee_id] [int] IDENTITY(1,1) NOT NULL,
	[first_name] [varchar](max) NULL,
	[last_name] [nvarchar](max) NULL,
	[email] [nvarchar](max) NULL,
	[phone_number] [nvarchar](max) NULL,
	[hire_date] [date] NULL,
	[job_id] [varchar](100) NULL,
	[salary] [int] NULL,
	[manager_id] [int] NULL,
	[department_id] [int] NULL,
 CONSTRAINT [PK__tbl_empl__C52E0BA89388A54C] PRIMARY KEY CLUSTERED 
(
	[employee_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UQ__tbl_empl__6E32B6A43A7523FC] UNIQUE NONCLUSTERED 
(
	[job_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  StoredProcedure [dbo].[departmentCrud]    Script Date: 1/3/2023 10:40:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[departmentCrud]
@department_id int,
@department_name nvarchar(max)=null,
@location_id int,
@Type varchar(100)
AS


BEGIN
	
	if @Type = 'Select'
	BEGIN
	select * from tbl_department
	END;
	
else if @Type ='Insert'
	BEGIN
	insert into tbl_department (department_name , location_id ) values(@department_name , @location_id)
	END;
		
	else if @Type = 'Update'
		BEGIN
		update tbl_department set department_name=@department_name ,location_id=@location_id where department_id = @department_id
		END
		
		else if @Type = 'delete'
		delete from tbl_department where department_id = @department_id
END

GO
/****** Object:  StoredProcedure [dbo].[EmployeeCrud]    Script Date: 1/3/2023 10:40:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[EmployeeCrud]
@employee_id int,
@first_name nvarchar(max)=null,
@last_name int,
@email varchar(100),
@phone_number varchar(100),
@hire_date date,
@job_id varchar(100),
@salary int,
@manager_id int,
@department_id int,
@Type varchar(100)
AS


BEGIN
	
	if @Type = 'Select'
	BEGIN
	select * from tbl_employee
	END;
	
else if @Type ='Insert'
	BEGIN
	insert into tbl_employee(first_name , last_name, email,phone_number,hire_date,job_id,salary,manager_id,department_id) values(@first_name , @last_name, @email,@phone_number,@hire_date,@job_id,@salary,@manager_id,@department_id)
	END;
		
	else if @Type = 'Update'
		BEGIN
		update tbl_employee set first_name =@first_name , last_name =@last_name, email = @email,phone_number = @phone_number,hire_date = @hire_date ,job_id = @job_id , salary = @salary , manager_id = @manager_id,department_id = @department_id where employee_id=@employee_id
		END 
		
		else if @Type = 'delete'
		Begin 
		delete from tbl_employee where employee_id = @employee_id
		END;
END

GO
USE [master]
GO
ALTER DATABASE [Assignment] SET  READ_WRITE 
GO
